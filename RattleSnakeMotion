#include <ESP32Servo.h>
#include <math.h>

const int noServos = 7; // Number of servos

Servo myservoXY[noServos]; // Array of servos for XY plane
Servo myservoXZ[noServos]; // Array of servos for XZ plane

int servoPinXY[noServos] = {2,4,5,15,16,17,18}; // Pins for XY servos
int servoPinXZ[noServos] = {19,21,22,23,13,12,14}; // Pins for XZ servos

int A = 1; // Amplitude factor for the waveform
float yPositionXY, yPositionXZ; // Positions for servos
float t = 0.0, L = 0.1, T = 0.5; // Time variables and parameters
const float Pi = 3.14159265359; // The mathematical constant Pi

void setup() {
  Serial.begin(115200); // Initialize serial communication

  // Allow allocation of all timers
  ESP32PWM::allocateTimer(0);
  ESP32PWM::allocateTimer(1);
  ESP32PWM::allocateTimer(2);
  ESP32PWM::allocateTimer(3);

  for (int i = 0; i < noServos; i++) {
    myservoXY[i].setPeriodHertz(50); // Set servo frequency for XY servos
    myservoXZ[i].setPeriodHertz(50); // Set servo frequency for XZ servos
  }

  // Attach and initialize XY and XZ servos
  for (int j = 0; j < noServos; j++) {
    myservoXY[j].attach(servoPinXY[j], 400, 2600); // Attach XY servo with min-max pulse width
    myservoXZ[j].attach(servoPinXZ[j], 400, 2600); // Attach XZ servo with min-max pulse width
    
    // Set initial position for specific servos
    if (j == 0){
      myservoXY[j].write(90);
      myservoXZ[j].write(90);
      delay(4000); // Delay for stability
    }
    // Set initial position for other servos
    else {
      myservoXY[j].write(50);
      myservoXZ[j].write(90);
      delay(400); // Delay for stability
    }
  }
}

void loop() {
  for (int x = 0; x < noServos; x++) {
    // Generate a sinusoidal waveform for motion
    float y = cos(radians(2 * Pi * (t / T - (x / L))));

    //you can change diffrent parameters to change the speed , wavelength and other properties of wave/snake
    
    // Calculate servo positions based on waveform
    yPositionXY = y * 50;
    yPositionXZ = y * 15;

    // Adjust servo positions for alternating direction
    if (x % 2 == 0) {
      yPositionXY = 90 + yPositionXY;
      yPositionXZ = 90 + yPositionXZ;
    } else {
      yPositionXY = 90 - yPositionXY;
      yPositionXZ = 90 - yPositionXZ;
    }

    // Set servo positions for XY and XZ planes
    myservoXY[x].write(yPositionXY);
    myservoXZ[x].write(yPositionXZ);

    t += 0.5; // Increment time
    delay(25); // Delay for smooth motion
  }
}
